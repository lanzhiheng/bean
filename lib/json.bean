fn parse(input) {
  input = input or ''
  var BEGIN_CHARACTER = ' '
  var ch = BEGIN_CHARACTER // 用于记录当前的字符
  var at = 0 // 用于记录当前的索引

  fn error(message) { // 报错信息
    throw({
      name: 'SyntaxError',
      message: message
    })
  }

  fn next(c) {
    if (c and ch != c) {
      error('An error occurred when parsing, at the ' +  at + ' character of the string')
    }

    ch = input.charAt(at);
    at += 1;
    return ch;
  }

  fn white() { // 跳过空白，简易判断 ' '.codePointAt() === 32
    while (ch.codePoint() <= 32) { next() }
  }

  fn number() { // 用于解析数字
    var num = ''
    if (ch == '-') {
      num += ch
      next()
    }

    while (ch >= '0' and ch <= '9') {
      num += ch
      next()
    }

    if (ch == '.') {
      num += ch
      next()

      while (ch >= '0' and ch <= '9') {
        num += ch
        next()
      }
    }

    if (ch == 'e' or ch == 'E') {
      num += ch
      next()

      if (ch == '+' or ch == '-') {
        num += ch
        next()
      }

      while (ch >= '0' and ch <= '9') {
        num += ch
        next()
      }
    }

    return num.toNum()
  }

  fn string(escape) { // 用于解析字符串
    var str = ''


    if (escape) { next(escape); }
    next('"')

    if (ch == '"') {
      return str
    }

    while (ch != '"') {
      str += ch
      next()
    }

    if (escape) { next(escape) }
    next('"')
    return str
  }

  fn object() { // 用于解析hash
    var k = ''
    var v = ''
    var obj = {}
    next('{')
    white()

    if (ch == '}') { return obj }

    do {
      white()
      k = string()
      white()
      next(':')
      white()
      v = value()
      obj[k] = v
      white()
    } while((ch == ',') and next(","))

    next('}')
    return obj
  }

  fn array() { // 用于解析数组
    var ary = []
    next('[')

    do {
      white()
      ary.push(value())
      white()
    } while (ch == ',' and next(","))

    next(']')
    return ary
  }

  fn value() { // 统一入口，里面可能会有递归调用
    if (ch == '"') {
      return string()
    } elsif (ch == '\\' and input.charAt(at + 1) == '"')  {
      return string('\\')
    } elsif (ch == '[') {
      return array()
    } elsif (ch == '{') {
      return object()
    } else {
      if (ch == 'f' or ch == 't' or ch == 'n') {
        special()
      } else {
        number()
      }
    }
  }

  fn special() { // 用于解析一些特殊的值false, true, null
    if (ch == 'f') {
      next('f')
      next('a')
      next('l')
      next('s')
      next('e')
      return false
    } elsif (ch == 't'){
      next('t')
      next('r')
      next('u')
      next('e')
      return true
    } elsif (ch == 'n') {
      next('n')
      next('u')
      next('l')
      next('l')
      return nil
    } else {
      error('An error occurred when parsing special value, at the ' + at + ' character of the string')
    }
  }

  next(BEGIN_CHARACTER)
  value()
}

fn stringify(hash) {
  var a = []
  a.push('{')

  hash.keys().each(fn cheking(k) { // TODO: There is a bug, I must pass name of this function
    var type = typeof hash[k]
    a.push('"' + k + '"')
    a.push(': ')

    if (type == 'nil') {
      a.push('null')
    } elsif (['number', 'boolean'].includes(type)) {
      a.push(hash[k])
    } elsif (type == 'string') {
      a.push('"' + hash[k] + '"')
    } elsif (type == 'hash') {
      a.push(stringify(hash[k]))
    } elsif (type == 'array') {
      a.push(hash[k].toString())
    }
    a.push(', ')
  })

  // a[a.length - 1] = '}'
  var last = a.length - 1
  a[last] = '}'
  a.join('')
}

var JSON = {
  parse: parse,
  stringify: stringify
}
