// Basic handle

var array = ["lanzhiheng", "zhiheng", "lan"]

assert(array.join("-"), "lanzhiheng-zhiheng-lan")
assert(array.join(",    "), "lanzhiheng,    zhiheng,    lan")
assert(array.join(), "lanzhiheng,zhiheng,lan")

var popArray = ["lanzhiheng", "zhiheng", "lan"]
assert(popArray.pop(), "lan")
assert(popArray, ["lanzhiheng", "zhiheng"])

var pushArray = ["lanzhiheng", "zhiheng", "lan"]
assert(pushArray.push("1234"), 4)
assert(pushArray, ["lanzhiheng", "zhiheng", "lan", "1234"])

var shiftArray = ["lanzhiheng", "zhiheng", "lan"]
assert(shiftArray.shift(), "lanzhiheng")
assert(shiftArray, ["zhiheng", "lan"])

var unshiftArray = ["lanzhiheng", "zhiheng", "lan"]
assert(unshiftArray.unshift("1233"), 4)
assert(unshiftArray, ["1233", "lanzhiheng", "zhiheng", "lan"])

var findArray = [1, 2, 3, "lanzhiheng"]
var findResult = findArray.find(fn(a) {
  a == 2
})
assert(findResult, 2)

var findResult = findArray.find(fn(a) {
  a == "lanzhiheng"
})
assert(findResult, "lanzhiheng")


var mapArray = [1, 2, 3, 4]
var mapResult = mapArray.map(fn(a) {
 a * 300
})
assert(mapResult, [300, 600, 900, 1200])

var mapResult = mapArray.map(fn(a, b) {
 b * a
})
assert(mapResult, [0, 2, 6, 12])

var mapResult = mapArray.map(fn(a, b) {
 b
})
assert(mapResult, [0, 1, 2, 3])

var reduceArray = [1, 2, 3, 4]

var reduceResult = reduceArray.reduce(fn(a, b) {
  return a + b
}, 0)

assert(reduceResult, 10)

reduceResult = reduceArray.reduce(fn(a, b) {
  return a * b
}, 1)
assert(reduceResult, 24)

var reduceStrArray = ["lanzhiheng", "zhiheng"]
var reduceResult = reduceStrArray.reduce(fn(a,b) {
  return b.concat(a)
}, "")
assert(reduceResult, "lanzhihengzhiheng")

var filterArray = [1, 2, 3, 4, 5]
var filterResult = filterArray.filter(fn(a,b) {
  a > 3
})
assert(filterResult, [4, 5])

var reverseArray = [1, 2, 3, 4, "string"]
assert(reverseArray.reverse(), ["string", 4, 3, 2, 1])
assert(reverseArray, ["string", 4, 3, 2, 1])

reverseArray = []
assert(reverseArray.reverse(), [])

// join different type
var joinDiff = [1,2,3,4,5,"lanzhiheng"]
assert(joinDiff.join(","), "1,2,3,4,5,lanzhiheng")

// each
var eachArr = [1,2,3,4,5]

eachArr.each(fn (i, c) {
 assert(i, c+1)
})

eachArr.each(fn (i) {
 fn hello() {
   assert(self, eachArr)
 }
 assert(self, eachArr)

 hello()
})

var b = {
  console: fn(a) {
    print(a)
  }
}

var a = {
  hello: fn(target) {
    while (target) {
      if (target) {
        return self;
      }
      return 100
    }
  }
}

assert(a.hello(true), a)
assert(a.hello(false), nil)
