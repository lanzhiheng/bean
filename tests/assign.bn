// var a = "lanzhiheng"
var name = 100;

var a = {
  lan: fn() {
    return "lan"
  }
}

var c = fn name() {} // Not effect the variable name

var str = "lanzhiheng"

// print(a.lan())
assert(a.lan, a['lan'])
assert(name, 100)
assert(typeof c, 'function')
assert(str.id, str['id'])

fn thisA() {
  return self.a
}

fn thisB() {
  return self.b
}

fn printA() {
  print(self.b)
}

var thisObj = {
  retThis: fn() {
    return self
  }
}

var temp = {
  a: 1,
  b: 2
}
temp['getA'] = thisA
temp['getB'] = thisB
temp.printA = printA
assert(thisObj.retThis(), thisObj)
assert(temp.getA(), 1)
assert(temp.getB(), 2)

// print("Test call stack")
fn breakfn() {
 var i = 40

 while (i > 10) {
   i = i - 1

if (i < 30) {
     if (i == 20) {
       5000
     } else {
       return 3000
     }
   }
 }
}

assert(breakfn(), 3000)