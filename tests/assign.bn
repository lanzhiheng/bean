// var a = "lanzhiheng"
var name = 100;

var a = {
  lan: fn() {
    return "lan"
  }
}

var c = fn name() {} // Not effect the variable name

var str = "lanzhiheng"

// print(a.lan())
assert(a.lan, a['lan'])
assert(name, 100)
assert(typeof c, 'function')
assert(str.id, str['id'])

fn thisA() {
  return self.a
}

fn thisB() {
  return self.b
}

fn printA() {
  print(self.b)
}

var thisObj = {
  retThis: fn() {
    return self
  }
}

var temp = {
  a: 1,
  b: 2
}
temp.getA = thisA
temp['getB'] = thisB
temp.printA = printA

assert(temp.getA, thisA)
assert(temp.getB, thisB)
assert(temp.printA, printA)

var array = []
array[0] = 100
array[1] = "lanzhiheng"
array[9] = []
assert(array[0], 100)
assert(array[1], "lanzhiheng")
assert(array[9], [])
assert(array[8], nil)

assert(temp.getA(), 1)
assert(temp.getB(), 2)
assert(thisObj.retThis(), thisObj)

print("Test call stack")
fn breakfn() {
 var i = 40

 while (i > 10) {
   i = i - 1

   if (i < 30) {
     if (i == 20) {
       5000
     } else {
       return 3000
     }
   }
 }
}

assert(breakfn(), 3000)

fn a() {
  var i = 10;

  while(i > 1) {
    i = i - 1;
    if (false) {
      return "hello"
    } else {
      return true
    }
  }
}

assert(a(), true)

// multi variable definition

var a, b = 100, c, d = "Bean"
assert(a, nil)
assert(b, 100)
assert(c, nil)
assert(d, "Bean")