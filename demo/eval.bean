assert(!true, false)
assert(- (1000), -1000);
assert(100 + 200, 300)
assert(100 - 29 * 0, 100)

fn a() {
  100 + 100000
}

assert(typeof a, 'function')
a = 10
assert(a, 10)

fn a() {
  return self
}

fn b() {
  return self
}

c = { a: a, b: b }
assert(a() == b(), true)

i = 0;

while(i < 10) {
  i = i + 1
}

assert(i, 10)

c = if (i > 100) {
  "more than 100"
} else {
  "less than 100"
}

assert(c, "less than 100")

fn abc() {
  i = 100

  if (i < 10) { return i;;; }
  else { return 3000 + i ;; };
  300
}

assert(abc(), 3100)